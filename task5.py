# –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä,
# –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.

from rectangle import Rectangle
import unittest

class TestClasseName(unittest.TestCase):
    
    
    def test_metod2(self):
        self.result = pr1.perimeter()
        self.assertEqual(self.result, 24)
    
    def test_metod3(self):
        self.result = pr1.sq()
        self.assertEqual(self.result, 35)
    
    def test_metod4(self):
            self.assertEqual(pr1, pr2)
    
    """def test_metod5(self): 
        result = Rectangle.sub('Hello,–ú–∏—Ä789 +World!88–ú–∏—Ä')
        self.assertEqual(result, 'hello world')"""
    
if __name__ == '__main__':
    pr1 = Rectangle(5, 7)
    pr2 = Rectangle(7, 5)
    unittest.main(verbosity=2)